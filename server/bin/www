#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");
var ServiceLocator = require("../framework/servicelocator");
import SocketIOService from "../service/SocketIOService";
import SocketIORoomService from "../service/SocketIORoomService";
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4010");
app.set("port", port);
//app.set('port',6000);

/**
 * Create HTTP server.
 */

export const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// Create Socket Server and its Service Class and Add it in Service Locator for use
var io = require("socket.io").listen(server);//, {origins:'http://localhost:4002', rejectUnauthorized: false});//,{transports:['websocket', 'polling', 'flashsocket'], origins:['http://localhost:4002']});
//io.origins(['http://localhost:4002']);
//io.set('origins','http://localhost:4002');

var socketIOService = new SocketIOService(io);
ServiceLocator.register("SocketIOService", socketIOService);
// Testing Socket
socketIOService.testSocketService();

var socketIORoomService = new SocketIORoomService(io);
ServiceLocator.register("SocketIORoomService", socketIORoomService);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log("Listening on " + bind);
}
