// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SessionSwitchingDialogBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final CheckBox cbObserve;

  @NonNull
  public final CheckBox cbTraverse;

  @NonNull
  public final EditText etSessionEndMp;

  @NonNull
  public final EditText etSessionExpEndMp1;

  @NonNull
  public final EditText etStartSessionMp;

  @NonNull
  public final EditText etStartSessionMp1;

  @NonNull
  public final ImageView ivSessionsDialogTitle;

  @NonNull
  public final ImageView ivSessionsDialogTitle1;

  @NonNull
  public final ImageView ivSessionsDialogTitleRunningSession;

  @NonNull
  public final LinearLayout llLimitInput;

  @NonNull
  public final LinearLayout llLimitInput1;

  @NonNull
  public final LinearLayout llTraverseTrack;

  @NonNull
  public final LinearLayout llTraverseTrack1;

  @NonNull
  public final LinearLayout rlLocInfo;

  @NonNull
  public final RelativeLayout rlMainContainer;

  @NonNull
  public final RelativeLayout rlSessionsDialogTitle;

  @NonNull
  public final RelativeLayout rlSessionsDialogTitle1;

  @NonNull
  public final RelativeLayout rlSessionsDialogTitleRunningSession;

  @NonNull
  public final Spinner spObserveTrack1;

  @NonNull
  public final Spinner spTraverseTrack1;

  @NonNull
  public final TextInputLayout tiEndMp;

  @NonNull
  public final TextInputLayout tiExpEndMp1;

  @NonNull
  public final TextInputLayout tiStartMp;

  @NonNull
  public final TextInputLayout tiStartMp1;

  @NonNull
  public final TextView tvLocName1;

  @NonNull
  public final TextView tvMpUnitFrom;

  @NonNull
  public final TextView tvMpUnitFrom1;

  @NonNull
  public final TextView tvMpUnitTo;

  @NonNull
  public final TextView tvMpUnitTo1;

  @NonNull
  public final TextView tvObserveTrackMsg;

  @NonNull
  public final TextView tvObserveTrackMsg1;

  @NonNull
  public final TextView tvSelectedObserveTrack;

  @NonNull
  public final TextView tvSelectedObserveTrackLimit1;

  @NonNull
  public final TextView tvSelectedTraverseTrack;

  @NonNull
  public final TextView tvSelectedTraverseTrackLimit1;

  @NonNull
  public final TextView tvSessionEndDialogRangeMsg1;

  @NonNull
  public final TextView tvTraverseTrackMsg;

  @NonNull
  public final TextView tvTraverseTrackMsg1;

  private SessionSwitchingDialogBinding(@NonNull RelativeLayout rootView,
      @NonNull CheckBox cbObserve, @NonNull CheckBox cbTraverse, @NonNull EditText etSessionEndMp,
      @NonNull EditText etSessionExpEndMp1, @NonNull EditText etStartSessionMp,
      @NonNull EditText etStartSessionMp1, @NonNull ImageView ivSessionsDialogTitle,
      @NonNull ImageView ivSessionsDialogTitle1,
      @NonNull ImageView ivSessionsDialogTitleRunningSession, @NonNull LinearLayout llLimitInput,
      @NonNull LinearLayout llLimitInput1, @NonNull LinearLayout llTraverseTrack,
      @NonNull LinearLayout llTraverseTrack1, @NonNull LinearLayout rlLocInfo,
      @NonNull RelativeLayout rlMainContainer, @NonNull RelativeLayout rlSessionsDialogTitle,
      @NonNull RelativeLayout rlSessionsDialogTitle1,
      @NonNull RelativeLayout rlSessionsDialogTitleRunningSession, @NonNull Spinner spObserveTrack1,
      @NonNull Spinner spTraverseTrack1, @NonNull TextInputLayout tiEndMp,
      @NonNull TextInputLayout tiExpEndMp1, @NonNull TextInputLayout tiStartMp,
      @NonNull TextInputLayout tiStartMp1, @NonNull TextView tvLocName1,
      @NonNull TextView tvMpUnitFrom, @NonNull TextView tvMpUnitFrom1, @NonNull TextView tvMpUnitTo,
      @NonNull TextView tvMpUnitTo1, @NonNull TextView tvObserveTrackMsg,
      @NonNull TextView tvObserveTrackMsg1, @NonNull TextView tvSelectedObserveTrack,
      @NonNull TextView tvSelectedObserveTrackLimit1, @NonNull TextView tvSelectedTraverseTrack,
      @NonNull TextView tvSelectedTraverseTrackLimit1,
      @NonNull TextView tvSessionEndDialogRangeMsg1, @NonNull TextView tvTraverseTrackMsg,
      @NonNull TextView tvTraverseTrackMsg1) {
    this.rootView = rootView;
    this.cbObserve = cbObserve;
    this.cbTraverse = cbTraverse;
    this.etSessionEndMp = etSessionEndMp;
    this.etSessionExpEndMp1 = etSessionExpEndMp1;
    this.etStartSessionMp = etStartSessionMp;
    this.etStartSessionMp1 = etStartSessionMp1;
    this.ivSessionsDialogTitle = ivSessionsDialogTitle;
    this.ivSessionsDialogTitle1 = ivSessionsDialogTitle1;
    this.ivSessionsDialogTitleRunningSession = ivSessionsDialogTitleRunningSession;
    this.llLimitInput = llLimitInput;
    this.llLimitInput1 = llLimitInput1;
    this.llTraverseTrack = llTraverseTrack;
    this.llTraverseTrack1 = llTraverseTrack1;
    this.rlLocInfo = rlLocInfo;
    this.rlMainContainer = rlMainContainer;
    this.rlSessionsDialogTitle = rlSessionsDialogTitle;
    this.rlSessionsDialogTitle1 = rlSessionsDialogTitle1;
    this.rlSessionsDialogTitleRunningSession = rlSessionsDialogTitleRunningSession;
    this.spObserveTrack1 = spObserveTrack1;
    this.spTraverseTrack1 = spTraverseTrack1;
    this.tiEndMp = tiEndMp;
    this.tiExpEndMp1 = tiExpEndMp1;
    this.tiStartMp = tiStartMp;
    this.tiStartMp1 = tiStartMp1;
    this.tvLocName1 = tvLocName1;
    this.tvMpUnitFrom = tvMpUnitFrom;
    this.tvMpUnitFrom1 = tvMpUnitFrom1;
    this.tvMpUnitTo = tvMpUnitTo;
    this.tvMpUnitTo1 = tvMpUnitTo1;
    this.tvObserveTrackMsg = tvObserveTrackMsg;
    this.tvObserveTrackMsg1 = tvObserveTrackMsg1;
    this.tvSelectedObserveTrack = tvSelectedObserveTrack;
    this.tvSelectedObserveTrackLimit1 = tvSelectedObserveTrackLimit1;
    this.tvSelectedTraverseTrack = tvSelectedTraverseTrack;
    this.tvSelectedTraverseTrackLimit1 = tvSelectedTraverseTrackLimit1;
    this.tvSessionEndDialogRangeMsg1 = tvSessionEndDialogRangeMsg1;
    this.tvTraverseTrackMsg = tvTraverseTrackMsg;
    this.tvTraverseTrackMsg1 = tvTraverseTrackMsg1;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SessionSwitchingDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SessionSwitchingDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.session_switching_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SessionSwitchingDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cb_observe;
      CheckBox cbObserve = rootView.findViewById(id);
      if (cbObserve == null) {
        break missingId;
      }

      id = R.id.cb_traverse;
      CheckBox cbTraverse = rootView.findViewById(id);
      if (cbTraverse == null) {
        break missingId;
      }

      id = R.id.et_session_end_mp;
      EditText etSessionEndMp = rootView.findViewById(id);
      if (etSessionEndMp == null) {
        break missingId;
      }

      id = R.id.et_session_exp_end_mp_1;
      EditText etSessionExpEndMp1 = rootView.findViewById(id);
      if (etSessionExpEndMp1 == null) {
        break missingId;
      }

      id = R.id.et_start_session_mp;
      EditText etStartSessionMp = rootView.findViewById(id);
      if (etStartSessionMp == null) {
        break missingId;
      }

      id = R.id.et_start_session_mp_1;
      EditText etStartSessionMp1 = rootView.findViewById(id);
      if (etStartSessionMp1 == null) {
        break missingId;
      }

      id = R.id.iv_sessions_dialog_title;
      ImageView ivSessionsDialogTitle = rootView.findViewById(id);
      if (ivSessionsDialogTitle == null) {
        break missingId;
      }

      id = R.id.iv_sessions_dialog_title_1;
      ImageView ivSessionsDialogTitle1 = rootView.findViewById(id);
      if (ivSessionsDialogTitle1 == null) {
        break missingId;
      }

      id = R.id.iv_sessions_dialog_title_running_session;
      ImageView ivSessionsDialogTitleRunningSession = rootView.findViewById(id);
      if (ivSessionsDialogTitleRunningSession == null) {
        break missingId;
      }

      id = R.id.ll_limit_input;
      LinearLayout llLimitInput = rootView.findViewById(id);
      if (llLimitInput == null) {
        break missingId;
      }

      id = R.id.ll_limit_input_1;
      LinearLayout llLimitInput1 = rootView.findViewById(id);
      if (llLimitInput1 == null) {
        break missingId;
      }

      id = R.id.ll_traverse_track;
      LinearLayout llTraverseTrack = rootView.findViewById(id);
      if (llTraverseTrack == null) {
        break missingId;
      }

      id = R.id.ll_traverse_track_1;
      LinearLayout llTraverseTrack1 = rootView.findViewById(id);
      if (llTraverseTrack1 == null) {
        break missingId;
      }

      id = R.id.rl_loc_info;
      LinearLayout rlLocInfo = rootView.findViewById(id);
      if (rlLocInfo == null) {
        break missingId;
      }

      id = R.id.rl_main_container;
      RelativeLayout rlMainContainer = rootView.findViewById(id);
      if (rlMainContainer == null) {
        break missingId;
      }

      id = R.id.rl_sessions_dialog_title;
      RelativeLayout rlSessionsDialogTitle = rootView.findViewById(id);
      if (rlSessionsDialogTitle == null) {
        break missingId;
      }

      id = R.id.rl_sessions_dialog_title_1;
      RelativeLayout rlSessionsDialogTitle1 = rootView.findViewById(id);
      if (rlSessionsDialogTitle1 == null) {
        break missingId;
      }

      id = R.id.rl_sessions_dialog_title_running_session;
      RelativeLayout rlSessionsDialogTitleRunningSession = rootView.findViewById(id);
      if (rlSessionsDialogTitleRunningSession == null) {
        break missingId;
      }

      id = R.id.sp_observe_track_1;
      Spinner spObserveTrack1 = rootView.findViewById(id);
      if (spObserveTrack1 == null) {
        break missingId;
      }

      id = R.id.sp_traverse_track_1;
      Spinner spTraverseTrack1 = rootView.findViewById(id);
      if (spTraverseTrack1 == null) {
        break missingId;
      }

      id = R.id.ti_end_mp;
      TextInputLayout tiEndMp = rootView.findViewById(id);
      if (tiEndMp == null) {
        break missingId;
      }

      id = R.id.ti_exp_end_mp_1;
      TextInputLayout tiExpEndMp1 = rootView.findViewById(id);
      if (tiExpEndMp1 == null) {
        break missingId;
      }

      id = R.id.ti_start_mp;
      TextInputLayout tiStartMp = rootView.findViewById(id);
      if (tiStartMp == null) {
        break missingId;
      }

      id = R.id.ti_start_mp_1;
      TextInputLayout tiStartMp1 = rootView.findViewById(id);
      if (tiStartMp1 == null) {
        break missingId;
      }

      id = R.id.tv_loc_name_1;
      TextView tvLocName1 = rootView.findViewById(id);
      if (tvLocName1 == null) {
        break missingId;
      }

      id = R.id.tv_mp_unit_from;
      TextView tvMpUnitFrom = rootView.findViewById(id);
      if (tvMpUnitFrom == null) {
        break missingId;
      }

      id = R.id.tv_mp_unit_from_1;
      TextView tvMpUnitFrom1 = rootView.findViewById(id);
      if (tvMpUnitFrom1 == null) {
        break missingId;
      }

      id = R.id.tv_mp_unit_to;
      TextView tvMpUnitTo = rootView.findViewById(id);
      if (tvMpUnitTo == null) {
        break missingId;
      }

      id = R.id.tv_mp_unit_to_1;
      TextView tvMpUnitTo1 = rootView.findViewById(id);
      if (tvMpUnitTo1 == null) {
        break missingId;
      }

      id = R.id.tv_observe_track_msg;
      TextView tvObserveTrackMsg = rootView.findViewById(id);
      if (tvObserveTrackMsg == null) {
        break missingId;
      }

      id = R.id.tv_observe_track_msg_1;
      TextView tvObserveTrackMsg1 = rootView.findViewById(id);
      if (tvObserveTrackMsg1 == null) {
        break missingId;
      }

      id = R.id.tv_selected_observe_track;
      TextView tvSelectedObserveTrack = rootView.findViewById(id);
      if (tvSelectedObserveTrack == null) {
        break missingId;
      }

      id = R.id.tv_selected_observe_track_limit_1;
      TextView tvSelectedObserveTrackLimit1 = rootView.findViewById(id);
      if (tvSelectedObserveTrackLimit1 == null) {
        break missingId;
      }

      id = R.id.tv_selected_traverse_track;
      TextView tvSelectedTraverseTrack = rootView.findViewById(id);
      if (tvSelectedTraverseTrack == null) {
        break missingId;
      }

      id = R.id.tv_selected_traverse_track_limit_1;
      TextView tvSelectedTraverseTrackLimit1 = rootView.findViewById(id);
      if (tvSelectedTraverseTrackLimit1 == null) {
        break missingId;
      }

      id = R.id.tv_session_end_dialog_range_msg_1;
      TextView tvSessionEndDialogRangeMsg1 = rootView.findViewById(id);
      if (tvSessionEndDialogRangeMsg1 == null) {
        break missingId;
      }

      id = R.id.tv_traverse_track_msg;
      TextView tvTraverseTrackMsg = rootView.findViewById(id);
      if (tvTraverseTrackMsg == null) {
        break missingId;
      }

      id = R.id.tv_traverse_track_msg_1;
      TextView tvTraverseTrackMsg1 = rootView.findViewById(id);
      if (tvTraverseTrackMsg1 == null) {
        break missingId;
      }

      return new SessionSwitchingDialogBinding((RelativeLayout) rootView, cbObserve, cbTraverse,
          etSessionEndMp, etSessionExpEndMp1, etStartSessionMp, etStartSessionMp1,
          ivSessionsDialogTitle, ivSessionsDialogTitle1, ivSessionsDialogTitleRunningSession,
          llLimitInput, llLimitInput1, llTraverseTrack, llTraverseTrack1, rlLocInfo,
          rlMainContainer, rlSessionsDialogTitle, rlSessionsDialogTitle1,
          rlSessionsDialogTitleRunningSession, spObserveTrack1, spTraverseTrack1, tiEndMp,
          tiExpEndMp1, tiStartMp, tiStartMp1, tvLocName1, tvMpUnitFrom, tvMpUnitFrom1, tvMpUnitTo,
          tvMpUnitTo1, tvObserveTrackMsg, tvObserveTrackMsg1, tvSelectedObserveTrack,
          tvSelectedObserveTrackLimit1, tvSelectedTraverseTrack, tvSelectedTraverseTrackLimit1,
          tvSessionEndDialogRangeMsg1, tvTraverseTrackMsg, tvTraverseTrackMsg1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
