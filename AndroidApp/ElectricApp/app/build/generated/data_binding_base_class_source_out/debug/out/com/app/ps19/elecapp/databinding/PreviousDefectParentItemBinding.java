// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PreviousDefectParentItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout llMp;

  @NonNull
  public final TextView tvDivider;

  @NonNull
  public final TextView tvEndMp;

  @NonNull
  public final TextView tvIssueTitle;

  @NonNull
  public final TextView tvStartMp;

  private PreviousDefectParentItemBinding(@NonNull RelativeLayout rootView,
      @NonNull LinearLayout llMp, @NonNull TextView tvDivider, @NonNull TextView tvEndMp,
      @NonNull TextView tvIssueTitle, @NonNull TextView tvStartMp) {
    this.rootView = rootView;
    this.llMp = llMp;
    this.tvDivider = tvDivider;
    this.tvEndMp = tvEndMp;
    this.tvIssueTitle = tvIssueTitle;
    this.tvStartMp = tvStartMp;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PreviousDefectParentItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PreviousDefectParentItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.previous_defect_parent_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PreviousDefectParentItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ll_mp;
      LinearLayout llMp = rootView.findViewById(id);
      if (llMp == null) {
        break missingId;
      }

      id = R.id.tv_divider;
      TextView tvDivider = rootView.findViewById(id);
      if (tvDivider == null) {
        break missingId;
      }

      id = R.id.tv_end_mp;
      TextView tvEndMp = rootView.findViewById(id);
      if (tvEndMp == null) {
        break missingId;
      }

      id = R.id.tv_issue_title;
      TextView tvIssueTitle = rootView.findViewById(id);
      if (tvIssueTitle == null) {
        break missingId;
      }

      id = R.id.tv_start_mp;
      TextView tvStartMp = rootView.findViewById(id);
      if (tvStartMp == null) {
        break missingId;
      }

      return new PreviousDefectParentItemBinding((RelativeLayout) rootView, llMp, tvDivider,
          tvEndMp, tvIssueTitle, tvStartMp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
