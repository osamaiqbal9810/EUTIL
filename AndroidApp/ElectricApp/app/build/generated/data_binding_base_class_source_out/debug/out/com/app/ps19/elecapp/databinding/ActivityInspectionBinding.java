// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityInspectionBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final FrameLayout flMaintenance;

  @NonNull
  public final LinearLayout llInspectionLegends;

  @NonNull
  public final LinearLayout llMainContainer;

  @NonNull
  public final LinearLayout llMaintenance;

  @NonNull
  public final LinearLayout llSessionsExpandableList;

  @NonNull
  public final ImageView maintenanceExpandIndicator;

  @NonNull
  public final RelativeLayout rlInspectionSessions;

  @NonNull
  public final RecyclerView rvInspectionSymbols;

  @NonNull
  public final ScrollView svContainer;

  private ActivityInspectionBinding(@NonNull RelativeLayout rootView,
      @NonNull FrameLayout flMaintenance, @NonNull LinearLayout llInspectionLegends,
      @NonNull LinearLayout llMainContainer, @NonNull LinearLayout llMaintenance,
      @NonNull LinearLayout llSessionsExpandableList, @NonNull ImageView maintenanceExpandIndicator,
      @NonNull RelativeLayout rlInspectionSessions, @NonNull RecyclerView rvInspectionSymbols,
      @NonNull ScrollView svContainer) {
    this.rootView = rootView;
    this.flMaintenance = flMaintenance;
    this.llInspectionLegends = llInspectionLegends;
    this.llMainContainer = llMainContainer;
    this.llMaintenance = llMaintenance;
    this.llSessionsExpandableList = llSessionsExpandableList;
    this.maintenanceExpandIndicator = maintenanceExpandIndicator;
    this.rlInspectionSessions = rlInspectionSessions;
    this.rvInspectionSymbols = rvInspectionSymbols;
    this.svContainer = svContainer;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityInspectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityInspectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_inspection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityInspectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fl_maintenance;
      FrameLayout flMaintenance = rootView.findViewById(id);
      if (flMaintenance == null) {
        break missingId;
      }

      id = R.id.ll_Inspection_Legends;
      LinearLayout llInspectionLegends = rootView.findViewById(id);
      if (llInspectionLegends == null) {
        break missingId;
      }

      id = R.id.ll_main_container;
      LinearLayout llMainContainer = rootView.findViewById(id);
      if (llMainContainer == null) {
        break missingId;
      }

      id = R.id.ll_maintenance;
      LinearLayout llMaintenance = rootView.findViewById(id);
      if (llMaintenance == null) {
        break missingId;
      }

      id = R.id.ll_sessions_expandableList;
      LinearLayout llSessionsExpandableList = rootView.findViewById(id);
      if (llSessionsExpandableList == null) {
        break missingId;
      }

      id = R.id.maintenance_expand_indicator;
      ImageView maintenanceExpandIndicator = rootView.findViewById(id);
      if (maintenanceExpandIndicator == null) {
        break missingId;
      }

      RelativeLayout rlInspectionSessions = (RelativeLayout) rootView;

      id = R.id.rvInspectionSymbols;
      RecyclerView rvInspectionSymbols = rootView.findViewById(id);
      if (rvInspectionSymbols == null) {
        break missingId;
      }

      id = R.id.sv_container;
      ScrollView svContainer = rootView.findViewById(id);
      if (svContainer == null) {
        break missingId;
      }

      return new ActivityInspectionBinding((RelativeLayout) rootView, flMaintenance,
          llInspectionLegends, llMainContainer, llMaintenance, llSessionsExpandableList,
          maintenanceExpandIndicator, rlInspectionSessions, rvInspectionSymbols, svContainer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
