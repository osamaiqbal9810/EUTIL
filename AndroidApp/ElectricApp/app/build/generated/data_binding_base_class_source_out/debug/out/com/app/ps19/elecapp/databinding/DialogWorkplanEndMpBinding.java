// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogWorkplanEndMpBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText etWorkplanEndMp;

  @NonNull
  public final TextInputLayout tiEndMp;

  @NonNull
  public final TextView tvTitleMsgWpEndMp;

  @NonNull
  public final TextView tvTitleMsgWpStartMpValue;

  private DialogWorkplanEndMpBinding(@NonNull LinearLayout rootView,
      @NonNull EditText etWorkplanEndMp, @NonNull TextInputLayout tiEndMp,
      @NonNull TextView tvTitleMsgWpEndMp, @NonNull TextView tvTitleMsgWpStartMpValue) {
    this.rootView = rootView;
    this.etWorkplanEndMp = etWorkplanEndMp;
    this.tiEndMp = tiEndMp;
    this.tvTitleMsgWpEndMp = tvTitleMsgWpEndMp;
    this.tvTitleMsgWpStartMpValue = tvTitleMsgWpStartMpValue;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogWorkplanEndMpBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogWorkplanEndMpBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_workplan_end_mp, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogWorkplanEndMpBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.et_workplan_end_mp;
      EditText etWorkplanEndMp = rootView.findViewById(id);
      if (etWorkplanEndMp == null) {
        break missingId;
      }

      id = R.id.ti_end_mp;
      TextInputLayout tiEndMp = rootView.findViewById(id);
      if (tiEndMp == null) {
        break missingId;
      }

      id = R.id.tv_title_msg_wp_end_mp;
      TextView tvTitleMsgWpEndMp = rootView.findViewById(id);
      if (tvTitleMsgWpEndMp == null) {
        break missingId;
      }

      id = R.id.tv_title_msg_wp_start_mp_value;
      TextView tvTitleMsgWpStartMpValue = rootView.findViewById(id);
      if (tvTitleMsgWpStartMpValue == null) {
        break missingId;
      }

      return new DialogWorkplanEndMpBinding((LinearLayout) rootView, etWorkplanEndMp, tiEndMp,
          tvTitleMsgWpEndMp, tvTitleMsgWpStartMpValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
