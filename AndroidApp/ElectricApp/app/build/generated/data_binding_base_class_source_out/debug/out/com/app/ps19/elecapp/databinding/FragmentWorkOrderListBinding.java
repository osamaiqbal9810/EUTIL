// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ExpandableListView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SearchView;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentWorkOrderListBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ExpandableListView expWorkOrderListView;

  @NonNull
  public final LinearLayout llSortContainer;

  @NonNull
  public final RecyclerView rvLocations;

  @NonNull
  public final SearchView searchFtt;

  @NonNull
  public final Spinner spMaintenanceSorting;

  private FragmentWorkOrderListBinding(@NonNull RelativeLayout rootView,
      @NonNull ExpandableListView expWorkOrderListView, @NonNull LinearLayout llSortContainer,
      @NonNull RecyclerView rvLocations, @NonNull SearchView searchFtt,
      @NonNull Spinner spMaintenanceSorting) {
    this.rootView = rootView;
    this.expWorkOrderListView = expWorkOrderListView;
    this.llSortContainer = llSortContainer;
    this.rvLocations = rvLocations;
    this.searchFtt = searchFtt;
    this.spMaintenanceSorting = spMaintenanceSorting;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentWorkOrderListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentWorkOrderListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_work_order_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentWorkOrderListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.expWorkOrderListView;
      ExpandableListView expWorkOrderListView = rootView.findViewById(id);
      if (expWorkOrderListView == null) {
        break missingId;
      }

      id = R.id.ll_sort_container;
      LinearLayout llSortContainer = rootView.findViewById(id);
      if (llSortContainer == null) {
        break missingId;
      }

      id = R.id.rvLocations;
      RecyclerView rvLocations = rootView.findViewById(id);
      if (rvLocations == null) {
        break missingId;
      }

      id = R.id.search_ftt;
      SearchView searchFtt = rootView.findViewById(id);
      if (searchFtt == null) {
        break missingId;
      }

      id = R.id.sp_maintenance_sorting;
      Spinner spMaintenanceSorting = rootView.findViewById(id);
      if (spMaintenanceSorting == null) {
        break missingId;
      }

      return new FragmentWorkOrderListBinding((RelativeLayout) rootView, expWorkOrderListView,
          llSortContainer, rvLocations, searchFtt, spMaintenanceSorting);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
