// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityInspectionStartBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button btnCancel;

  @NonNull
  public final Button btnOk;

  @NonNull
  public final CheckBox cbObserve;

  @NonNull
  public final CheckBox cbTraverse;

  @NonNull
  public final EditText etExpEndMp;

  @NonNull
  public final EditText etInspectionTypeDescription;

  @NonNull
  public final EditText etWeatherConditions;

  @NonNull
  public final EditText etWorkplanStartMp;

  @NonNull
  public final ImageView ivSessionsDialogTitle;

  @NonNull
  public final LinearLayout llInspectionDesc;

  @NonNull
  public final LinearLayout llInspectionType;

  @NonNull
  public final LinearLayout llLimitInput;

  @NonNull
  public final LinearLayout llListSharingMembers;

  @NonNull
  public final LinearLayout llSessionTitle;

  @NonNull
  public final LinearLayout llSharingInspection;

  @NonNull
  public final LinearLayout llStartMp;

  @NonNull
  public final LinearLayout llStartMp1;

  @NonNull
  public final LinearLayout llTraverseTrack;

  @NonNull
  public final LinearLayout llWeatherConditions;

  @NonNull
  public final ListView lvSharingMembers;

  @NonNull
  public final RadioButton rbActionClass1;

  @NonNull
  public final RadioButton rbActionClass2;

  @NonNull
  public final RadioButton rbInspectionType1;

  @NonNull
  public final RadioButton rbInspectionType2;

  @NonNull
  public final RadioButton rbInspectionType3;

  @NonNull
  public final RadioGroup rgInspectionType;

  @NonNull
  public final RadioGroup rgTraverseType;

  @NonNull
  public final Spinner spObserveTrack;

  @NonNull
  public final Spinner spTemperature;

  @NonNull
  public final Spinner spTraverseTrack;

  @NonNull
  public final TextInputLayout tiExpEndMp;

  @NonNull
  public final TextInputLayout tiStartMp;

  @NonNull
  public final TextView tvLineNameAis;

  @NonNull
  public final TextView tvMPEndAis;

  @NonNull
  public final TextView tvMPStartAis;

  @NonNull
  public final TextView tvMpUnitFrom;

  @NonNull
  public final TextView tvMpUnitTo;

  @NonNull
  public final TextView tvObserveTrackMsg;

  @NonNull
  public final TextView tvSelectedObserveTrackLimit;

  @NonNull
  public final TextView tvSelectedTraverseTrackLimit;

  @NonNull
  public final TextView tvSharingInspectionMembersMsg;

  @NonNull
  public final TextView tvTempSign;

  @NonNull
  public final TextView tvTitleMpRange;

  @NonNull
  public final TextView tvTitleMsgWpStartMp;

  @NonNull
  public final TextView tvTraverseTrackMsg;

  private ActivityInspectionStartBinding(@NonNull ScrollView rootView, @NonNull Button btnCancel,
      @NonNull Button btnOk, @NonNull CheckBox cbObserve, @NonNull CheckBox cbTraverse,
      @NonNull EditText etExpEndMp, @NonNull EditText etInspectionTypeDescription,
      @NonNull EditText etWeatherConditions, @NonNull EditText etWorkplanStartMp,
      @NonNull ImageView ivSessionsDialogTitle, @NonNull LinearLayout llInspectionDesc,
      @NonNull LinearLayout llInspectionType, @NonNull LinearLayout llLimitInput,
      @NonNull LinearLayout llListSharingMembers, @NonNull LinearLayout llSessionTitle,
      @NonNull LinearLayout llSharingInspection, @NonNull LinearLayout llStartMp,
      @NonNull LinearLayout llStartMp1, @NonNull LinearLayout llTraverseTrack,
      @NonNull LinearLayout llWeatherConditions, @NonNull ListView lvSharingMembers,
      @NonNull RadioButton rbActionClass1, @NonNull RadioButton rbActionClass2,
      @NonNull RadioButton rbInspectionType1, @NonNull RadioButton rbInspectionType2,
      @NonNull RadioButton rbInspectionType3, @NonNull RadioGroup rgInspectionType,
      @NonNull RadioGroup rgTraverseType, @NonNull Spinner spObserveTrack,
      @NonNull Spinner spTemperature, @NonNull Spinner spTraverseTrack,
      @NonNull TextInputLayout tiExpEndMp, @NonNull TextInputLayout tiStartMp,
      @NonNull TextView tvLineNameAis, @NonNull TextView tvMPEndAis, @NonNull TextView tvMPStartAis,
      @NonNull TextView tvMpUnitFrom, @NonNull TextView tvMpUnitTo,
      @NonNull TextView tvObserveTrackMsg, @NonNull TextView tvSelectedObserveTrackLimit,
      @NonNull TextView tvSelectedTraverseTrackLimit,
      @NonNull TextView tvSharingInspectionMembersMsg, @NonNull TextView tvTempSign,
      @NonNull TextView tvTitleMpRange, @NonNull TextView tvTitleMsgWpStartMp,
      @NonNull TextView tvTraverseTrackMsg) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnOk = btnOk;
    this.cbObserve = cbObserve;
    this.cbTraverse = cbTraverse;
    this.etExpEndMp = etExpEndMp;
    this.etInspectionTypeDescription = etInspectionTypeDescription;
    this.etWeatherConditions = etWeatherConditions;
    this.etWorkplanStartMp = etWorkplanStartMp;
    this.ivSessionsDialogTitle = ivSessionsDialogTitle;
    this.llInspectionDesc = llInspectionDesc;
    this.llInspectionType = llInspectionType;
    this.llLimitInput = llLimitInput;
    this.llListSharingMembers = llListSharingMembers;
    this.llSessionTitle = llSessionTitle;
    this.llSharingInspection = llSharingInspection;
    this.llStartMp = llStartMp;
    this.llStartMp1 = llStartMp1;
    this.llTraverseTrack = llTraverseTrack;
    this.llWeatherConditions = llWeatherConditions;
    this.lvSharingMembers = lvSharingMembers;
    this.rbActionClass1 = rbActionClass1;
    this.rbActionClass2 = rbActionClass2;
    this.rbInspectionType1 = rbInspectionType1;
    this.rbInspectionType2 = rbInspectionType2;
    this.rbInspectionType3 = rbInspectionType3;
    this.rgInspectionType = rgInspectionType;
    this.rgTraverseType = rgTraverseType;
    this.spObserveTrack = spObserveTrack;
    this.spTemperature = spTemperature;
    this.spTraverseTrack = spTraverseTrack;
    this.tiExpEndMp = tiExpEndMp;
    this.tiStartMp = tiStartMp;
    this.tvLineNameAis = tvLineNameAis;
    this.tvMPEndAis = tvMPEndAis;
    this.tvMPStartAis = tvMPStartAis;
    this.tvMpUnitFrom = tvMpUnitFrom;
    this.tvMpUnitTo = tvMpUnitTo;
    this.tvObserveTrackMsg = tvObserveTrackMsg;
    this.tvSelectedObserveTrackLimit = tvSelectedObserveTrackLimit;
    this.tvSelectedTraverseTrackLimit = tvSelectedTraverseTrackLimit;
    this.tvSharingInspectionMembersMsg = tvSharingInspectionMembersMsg;
    this.tvTempSign = tvTempSign;
    this.tvTitleMpRange = tvTitleMpRange;
    this.tvTitleMsgWpStartMp = tvTitleMsgWpStartMp;
    this.tvTraverseTrackMsg = tvTraverseTrackMsg;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityInspectionStartBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityInspectionStartBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_inspection_start, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityInspectionStartBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_cancel;
      Button btnCancel = rootView.findViewById(id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btn_ok;
      Button btnOk = rootView.findViewById(id);
      if (btnOk == null) {
        break missingId;
      }

      id = R.id.cb_observe;
      CheckBox cbObserve = rootView.findViewById(id);
      if (cbObserve == null) {
        break missingId;
      }

      id = R.id.cb_traverse;
      CheckBox cbTraverse = rootView.findViewById(id);
      if (cbTraverse == null) {
        break missingId;
      }

      id = R.id.et_exp_end_mp;
      EditText etExpEndMp = rootView.findViewById(id);
      if (etExpEndMp == null) {
        break missingId;
      }

      id = R.id.et_inspection_type_description;
      EditText etInspectionTypeDescription = rootView.findViewById(id);
      if (etInspectionTypeDescription == null) {
        break missingId;
      }

      id = R.id.et_weather_conditions;
      EditText etWeatherConditions = rootView.findViewById(id);
      if (etWeatherConditions == null) {
        break missingId;
      }

      id = R.id.et_workplan_start_mp;
      EditText etWorkplanStartMp = rootView.findViewById(id);
      if (etWorkplanStartMp == null) {
        break missingId;
      }

      id = R.id.iv_sessions_dialog_title;
      ImageView ivSessionsDialogTitle = rootView.findViewById(id);
      if (ivSessionsDialogTitle == null) {
        break missingId;
      }

      id = R.id.ll_inspection_desc;
      LinearLayout llInspectionDesc = rootView.findViewById(id);
      if (llInspectionDesc == null) {
        break missingId;
      }

      id = R.id.ll_inspection_type;
      LinearLayout llInspectionType = rootView.findViewById(id);
      if (llInspectionType == null) {
        break missingId;
      }

      id = R.id.ll_limit_input;
      LinearLayout llLimitInput = rootView.findViewById(id);
      if (llLimitInput == null) {
        break missingId;
      }

      id = R.id.ll_list_sharing_members;
      LinearLayout llListSharingMembers = rootView.findViewById(id);
      if (llListSharingMembers == null) {
        break missingId;
      }

      id = R.id.ll_session_title;
      LinearLayout llSessionTitle = rootView.findViewById(id);
      if (llSessionTitle == null) {
        break missingId;
      }

      id = R.id.ll_sharing_inspection;
      LinearLayout llSharingInspection = rootView.findViewById(id);
      if (llSharingInspection == null) {
        break missingId;
      }

      id = R.id.ll_start_mp;
      LinearLayout llStartMp = rootView.findViewById(id);
      if (llStartMp == null) {
        break missingId;
      }

      id = R.id.ll_start_mp_1;
      LinearLayout llStartMp1 = rootView.findViewById(id);
      if (llStartMp1 == null) {
        break missingId;
      }

      id = R.id.ll_traverse_track;
      LinearLayout llTraverseTrack = rootView.findViewById(id);
      if (llTraverseTrack == null) {
        break missingId;
      }

      id = R.id.ll_weather_conditions;
      LinearLayout llWeatherConditions = rootView.findViewById(id);
      if (llWeatherConditions == null) {
        break missingId;
      }

      id = R.id.lv_sharing_members;
      ListView lvSharingMembers = rootView.findViewById(id);
      if (lvSharingMembers == null) {
        break missingId;
      }

      id = R.id.rb_action_class1;
      RadioButton rbActionClass1 = rootView.findViewById(id);
      if (rbActionClass1 == null) {
        break missingId;
      }

      id = R.id.rb_action_class2;
      RadioButton rbActionClass2 = rootView.findViewById(id);
      if (rbActionClass2 == null) {
        break missingId;
      }

      id = R.id.rb_inspection_type_1;
      RadioButton rbInspectionType1 = rootView.findViewById(id);
      if (rbInspectionType1 == null) {
        break missingId;
      }

      id = R.id.rb_inspection_type_2;
      RadioButton rbInspectionType2 = rootView.findViewById(id);
      if (rbInspectionType2 == null) {
        break missingId;
      }

      id = R.id.rb_inspection_type_3;
      RadioButton rbInspectionType3 = rootView.findViewById(id);
      if (rbInspectionType3 == null) {
        break missingId;
      }

      id = R.id.rg_inspection_type;
      RadioGroup rgInspectionType = rootView.findViewById(id);
      if (rgInspectionType == null) {
        break missingId;
      }

      id = R.id.rg_traverse_type;
      RadioGroup rgTraverseType = rootView.findViewById(id);
      if (rgTraverseType == null) {
        break missingId;
      }

      id = R.id.sp_observe_track;
      Spinner spObserveTrack = rootView.findViewById(id);
      if (spObserveTrack == null) {
        break missingId;
      }

      id = R.id.sp_temperature;
      Spinner spTemperature = rootView.findViewById(id);
      if (spTemperature == null) {
        break missingId;
      }

      id = R.id.sp_traverse_track;
      Spinner spTraverseTrack = rootView.findViewById(id);
      if (spTraverseTrack == null) {
        break missingId;
      }

      id = R.id.ti_exp_end_mp;
      TextInputLayout tiExpEndMp = rootView.findViewById(id);
      if (tiExpEndMp == null) {
        break missingId;
      }

      id = R.id.ti_start_mp;
      TextInputLayout tiStartMp = rootView.findViewById(id);
      if (tiStartMp == null) {
        break missingId;
      }

      id = R.id.tvLineName_ais;
      TextView tvLineNameAis = rootView.findViewById(id);
      if (tvLineNameAis == null) {
        break missingId;
      }

      id = R.id.tvMPEnd_ais;
      TextView tvMPEndAis = rootView.findViewById(id);
      if (tvMPEndAis == null) {
        break missingId;
      }

      id = R.id.tvMPStart_ais;
      TextView tvMPStartAis = rootView.findViewById(id);
      if (tvMPStartAis == null) {
        break missingId;
      }

      id = R.id.tv_mp_unit_from;
      TextView tvMpUnitFrom = rootView.findViewById(id);
      if (tvMpUnitFrom == null) {
        break missingId;
      }

      id = R.id.tv_mp_unit_to;
      TextView tvMpUnitTo = rootView.findViewById(id);
      if (tvMpUnitTo == null) {
        break missingId;
      }

      id = R.id.tv_observe_track_msg;
      TextView tvObserveTrackMsg = rootView.findViewById(id);
      if (tvObserveTrackMsg == null) {
        break missingId;
      }

      id = R.id.tv_selected_observe_track_limit;
      TextView tvSelectedObserveTrackLimit = rootView.findViewById(id);
      if (tvSelectedObserveTrackLimit == null) {
        break missingId;
      }

      id = R.id.tv_selected_traverse_track_limit;
      TextView tvSelectedTraverseTrackLimit = rootView.findViewById(id);
      if (tvSelectedTraverseTrackLimit == null) {
        break missingId;
      }

      id = R.id.tv_sharing_inspection_members_msg;
      TextView tvSharingInspectionMembersMsg = rootView.findViewById(id);
      if (tvSharingInspectionMembersMsg == null) {
        break missingId;
      }

      id = R.id.tv_temp_sign;
      TextView tvTempSign = rootView.findViewById(id);
      if (tvTempSign == null) {
        break missingId;
      }

      id = R.id.tv_title_mp_range;
      TextView tvTitleMpRange = rootView.findViewById(id);
      if (tvTitleMpRange == null) {
        break missingId;
      }

      id = R.id.tv_title_msg_wp_start_mp;
      TextView tvTitleMsgWpStartMp = rootView.findViewById(id);
      if (tvTitleMsgWpStartMp == null) {
        break missingId;
      }

      id = R.id.tv_traverse_track_msg;
      TextView tvTraverseTrackMsg = rootView.findViewById(id);
      if (tvTraverseTrackMsg == null) {
        break missingId;
      }

      return new ActivityInspectionStartBinding((ScrollView) rootView, btnCancel, btnOk, cbObserve,
          cbTraverse, etExpEndMp, etInspectionTypeDescription, etWeatherConditions,
          etWorkplanStartMp, ivSessionsDialogTitle, llInspectionDesc, llInspectionType,
          llLimitInput, llListSharingMembers, llSessionTitle, llSharingInspection, llStartMp,
          llStartMp1, llTraverseTrack, llWeatherConditions, lvSharingMembers, rbActionClass1,
          rbActionClass2, rbInspectionType1, rbInspectionType2, rbInspectionType3, rgInspectionType,
          rgTraverseType, spObserveTrack, spTemperature, spTraverseTrack, tiExpEndMp, tiStartMp,
          tvLineNameAis, tvMPEndAis, tvMPStartAis, tvMpUnitFrom, tvMpUnitTo, tvObserveTrackMsg,
          tvSelectedObserveTrackLimit, tvSelectedTraverseTrackLimit, tvSharingInspectionMembersMsg,
          tvTempSign, tvTitleMpRange, tvTitleMsgWpStartMp, tvTraverseTrackMsg);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
