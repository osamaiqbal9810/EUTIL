// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class InspectionUnitParentItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView fixAssetLocationEdit;

  @NonNull
  public final ImageView imgInspectionTile;

  @NonNull
  public final ImageView imgIssueAddIupi;

  @NonNull
  public final ImageView imgMpEndValue;

  @NonNull
  public final ImageView imgObserve;

  @NonNull
  public final ImageView imgTraverse;

  @NonNull
  public final ImageView imgViewPopup;

  @NonNull
  public final TextView issueCountNew;

  @NonNull
  public final TextView issueCountOld;

  @NonNull
  public final ImageView ivDefectsList;

  @NonNull
  public final ImageView ivMarkerEnd;

  @NonNull
  public final LinearLayout llIssuesCounts;

  @NonNull
  public final LinearLayout llMarkerContainer;

  @NonNull
  public final LinearLayout llMpContainer;

  @NonNull
  public final TextView tvMarkerEnd;

  @NonNull
  public final TextView tvMarkerStart;

  @NonNull
  public final TextView tvMilPostEnd;

  @NonNull
  public final TextView tvMilPostLimits;

  @NonNull
  public final TextView tvMilPostStart;

  @NonNull
  public final TextView tvParent;

  @NonNull
  public final View viewParent;

  private InspectionUnitParentItemBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView fixAssetLocationEdit, @NonNull ImageView imgInspectionTile,
      @NonNull ImageView imgIssueAddIupi, @NonNull ImageView imgMpEndValue,
      @NonNull ImageView imgObserve, @NonNull ImageView imgTraverse,
      @NonNull ImageView imgViewPopup, @NonNull TextView issueCountNew,
      @NonNull TextView issueCountOld, @NonNull ImageView ivDefectsList,
      @NonNull ImageView ivMarkerEnd, @NonNull LinearLayout llIssuesCounts,
      @NonNull LinearLayout llMarkerContainer, @NonNull LinearLayout llMpContainer,
      @NonNull TextView tvMarkerEnd, @NonNull TextView tvMarkerStart,
      @NonNull TextView tvMilPostEnd, @NonNull TextView tvMilPostLimits,
      @NonNull TextView tvMilPostStart, @NonNull TextView tvParent, @NonNull View viewParent) {
    this.rootView = rootView;
    this.fixAssetLocationEdit = fixAssetLocationEdit;
    this.imgInspectionTile = imgInspectionTile;
    this.imgIssueAddIupi = imgIssueAddIupi;
    this.imgMpEndValue = imgMpEndValue;
    this.imgObserve = imgObserve;
    this.imgTraverse = imgTraverse;
    this.imgViewPopup = imgViewPopup;
    this.issueCountNew = issueCountNew;
    this.issueCountOld = issueCountOld;
    this.ivDefectsList = ivDefectsList;
    this.ivMarkerEnd = ivMarkerEnd;
    this.llIssuesCounts = llIssuesCounts;
    this.llMarkerContainer = llMarkerContainer;
    this.llMpContainer = llMpContainer;
    this.tvMarkerEnd = tvMarkerEnd;
    this.tvMarkerStart = tvMarkerStart;
    this.tvMilPostEnd = tvMilPostEnd;
    this.tvMilPostLimits = tvMilPostLimits;
    this.tvMilPostStart = tvMilPostStart;
    this.tvParent = tvParent;
    this.viewParent = viewParent;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static InspectionUnitParentItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static InspectionUnitParentItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.inspection_unit_parent_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static InspectionUnitParentItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fixAssetLocationEdit;
      ImageView fixAssetLocationEdit = rootView.findViewById(id);
      if (fixAssetLocationEdit == null) {
        break missingId;
      }

      id = R.id.img_inspection_tile;
      ImageView imgInspectionTile = rootView.findViewById(id);
      if (imgInspectionTile == null) {
        break missingId;
      }

      id = R.id.img_issue_add_iupi;
      ImageView imgIssueAddIupi = rootView.findViewById(id);
      if (imgIssueAddIupi == null) {
        break missingId;
      }

      id = R.id.imgMpEndValue;
      ImageView imgMpEndValue = rootView.findViewById(id);
      if (imgMpEndValue == null) {
        break missingId;
      }

      id = R.id.imgObserve;
      ImageView imgObserve = rootView.findViewById(id);
      if (imgObserve == null) {
        break missingId;
      }

      id = R.id.imgTraverse;
      ImageView imgTraverse = rootView.findViewById(id);
      if (imgTraverse == null) {
        break missingId;
      }

      id = R.id.imgViewPopup;
      ImageView imgViewPopup = rootView.findViewById(id);
      if (imgViewPopup == null) {
        break missingId;
      }

      id = R.id.issue_count_new;
      TextView issueCountNew = rootView.findViewById(id);
      if (issueCountNew == null) {
        break missingId;
      }

      id = R.id.issue_count_old;
      TextView issueCountOld = rootView.findViewById(id);
      if (issueCountOld == null) {
        break missingId;
      }

      id = R.id.iv_defects_list;
      ImageView ivDefectsList = rootView.findViewById(id);
      if (ivDefectsList == null) {
        break missingId;
      }

      id = R.id.iv_marker_end;
      ImageView ivMarkerEnd = rootView.findViewById(id);
      if (ivMarkerEnd == null) {
        break missingId;
      }

      id = R.id.ll_issues_counts;
      LinearLayout llIssuesCounts = rootView.findViewById(id);
      if (llIssuesCounts == null) {
        break missingId;
      }

      id = R.id.ll_marker_container;
      LinearLayout llMarkerContainer = rootView.findViewById(id);
      if (llMarkerContainer == null) {
        break missingId;
      }

      id = R.id.ll_mp_container;
      LinearLayout llMpContainer = rootView.findViewById(id);
      if (llMpContainer == null) {
        break missingId;
      }

      id = R.id.tv_marker_end;
      TextView tvMarkerEnd = rootView.findViewById(id);
      if (tvMarkerEnd == null) {
        break missingId;
      }

      id = R.id.tv_marker_start;
      TextView tvMarkerStart = rootView.findViewById(id);
      if (tvMarkerStart == null) {
        break missingId;
      }

      id = R.id.tvMilPostEnd;
      TextView tvMilPostEnd = rootView.findViewById(id);
      if (tvMilPostEnd == null) {
        break missingId;
      }

      id = R.id.tvMilPostLimits;
      TextView tvMilPostLimits = rootView.findViewById(id);
      if (tvMilPostLimits == null) {
        break missingId;
      }

      id = R.id.tvMilPostStart;
      TextView tvMilPostStart = rootView.findViewById(id);
      if (tvMilPostStart == null) {
        break missingId;
      }

      id = R.id.tvParent;
      TextView tvParent = rootView.findViewById(id);
      if (tvParent == null) {
        break missingId;
      }

      id = R.id.viewParent;
      View viewParent = rootView.findViewById(id);
      if (viewParent == null) {
        break missingId;
      }

      return new InspectionUnitParentItemBinding((LinearLayout) rootView, fixAssetLocationEdit,
          imgInspectionTile, imgIssueAddIupi, imgMpEndValue, imgObserve, imgTraverse, imgViewPopup,
          issueCountNew, issueCountOld, ivDefectsList, ivMarkerEnd, llIssuesCounts,
          llMarkerContainer, llMpContainer, tvMarkerEnd, tvMarkerStart, tvMilPostEnd,
          tvMilPostLimits, tvMilPostStart, tvParent, viewParent);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
