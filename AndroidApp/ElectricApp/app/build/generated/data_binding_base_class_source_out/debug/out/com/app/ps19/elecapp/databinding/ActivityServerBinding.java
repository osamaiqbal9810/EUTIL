// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import com.google.android.material.appbar.AppBarLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityServerBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final View LastDivider;

  @NonNull
  public final AppBarLayout appbarlayout;

  @NonNull
  public final Button btnClearData;

  @NonNull
  public final Button btnSelectServer;

  @NonNull
  public final View divider2;

  @NonNull
  public final View dividerLast;

  @NonNull
  public final LinearLayout llSerInfo;

  @NonNull
  public final RelativeLayout rlAudibleAlert;

  @NonNull
  public final RelativeLayout rlBypassTaskView;

  @NonNull
  public final RelativeLayout rlIssueUpdate;

  @NonNull
  public final RelativeLayout rlMpRequire;

  @NonNull
  public final RelativeLayout rlOldService;

  @NonNull
  public final RelativeLayout rlSingleCodeSelection;

  @NonNull
  public final RelativeLayout rlSwitchInspection;

  @NonNull
  public final RelativeLayout rlTraverseReq;

  @NonNull
  public final View secondLastDivider;

  @NonNull
  public final Toolbar serverPageToolBar;

  @NonNull
  public final Switch swAudibleAlert;

  @NonNull
  public final Switch swBypassTaskView;

  @NonNull
  public final Switch swIssueUpdate;

  @NonNull
  public final Switch swOldService;

  @NonNull
  public final Switch swRequireMp;

  @NonNull
  public final Switch swRequireTraverse;

  @NonNull
  public final Switch swSingleCodeSelection;

  @NonNull
  public final Switch swSwitchInspection;

  @NonNull
  public final TextView tvAudibleAlert;

  @NonNull
  public final TextView tvBypassTaskView;

  @NonNull
  public final TextView tvClrAll;

  @NonNull
  public final TextView tvGlobalSettings;

  @NonNull
  public final TextView tvIssueUpdate;

  @NonNull
  public final TextView tvOldService;

  @NonNull
  public final TextView tvSelectedServer;

  @NonNull
  public final TextView tvSingleCodeSelection;

  @NonNull
  public final TextView tvSwitchInspection;

  @NonNull
  public final TextView tvTakeMilepost;

  @NonNull
  public final TextView tvTraverseTrackReq;

  private ActivityServerBinding(@NonNull RelativeLayout rootView, @NonNull View LastDivider,
      @NonNull AppBarLayout appbarlayout, @NonNull Button btnClearData,
      @NonNull Button btnSelectServer, @NonNull View divider2, @NonNull View dividerLast,
      @NonNull LinearLayout llSerInfo, @NonNull RelativeLayout rlAudibleAlert,
      @NonNull RelativeLayout rlBypassTaskView, @NonNull RelativeLayout rlIssueUpdate,
      @NonNull RelativeLayout rlMpRequire, @NonNull RelativeLayout rlOldService,
      @NonNull RelativeLayout rlSingleCodeSelection, @NonNull RelativeLayout rlSwitchInspection,
      @NonNull RelativeLayout rlTraverseReq, @NonNull View secondLastDivider,
      @NonNull Toolbar serverPageToolBar, @NonNull Switch swAudibleAlert,
      @NonNull Switch swBypassTaskView, @NonNull Switch swIssueUpdate, @NonNull Switch swOldService,
      @NonNull Switch swRequireMp, @NonNull Switch swRequireTraverse,
      @NonNull Switch swSingleCodeSelection, @NonNull Switch swSwitchInspection,
      @NonNull TextView tvAudibleAlert, @NonNull TextView tvBypassTaskView,
      @NonNull TextView tvClrAll, @NonNull TextView tvGlobalSettings,
      @NonNull TextView tvIssueUpdate, @NonNull TextView tvOldService,
      @NonNull TextView tvSelectedServer, @NonNull TextView tvSingleCodeSelection,
      @NonNull TextView tvSwitchInspection, @NonNull TextView tvTakeMilepost,
      @NonNull TextView tvTraverseTrackReq) {
    this.rootView = rootView;
    this.LastDivider = LastDivider;
    this.appbarlayout = appbarlayout;
    this.btnClearData = btnClearData;
    this.btnSelectServer = btnSelectServer;
    this.divider2 = divider2;
    this.dividerLast = dividerLast;
    this.llSerInfo = llSerInfo;
    this.rlAudibleAlert = rlAudibleAlert;
    this.rlBypassTaskView = rlBypassTaskView;
    this.rlIssueUpdate = rlIssueUpdate;
    this.rlMpRequire = rlMpRequire;
    this.rlOldService = rlOldService;
    this.rlSingleCodeSelection = rlSingleCodeSelection;
    this.rlSwitchInspection = rlSwitchInspection;
    this.rlTraverseReq = rlTraverseReq;
    this.secondLastDivider = secondLastDivider;
    this.serverPageToolBar = serverPageToolBar;
    this.swAudibleAlert = swAudibleAlert;
    this.swBypassTaskView = swBypassTaskView;
    this.swIssueUpdate = swIssueUpdate;
    this.swOldService = swOldService;
    this.swRequireMp = swRequireMp;
    this.swRequireTraverse = swRequireTraverse;
    this.swSingleCodeSelection = swSingleCodeSelection;
    this.swSwitchInspection = swSwitchInspection;
    this.tvAudibleAlert = tvAudibleAlert;
    this.tvBypassTaskView = tvBypassTaskView;
    this.tvClrAll = tvClrAll;
    this.tvGlobalSettings = tvGlobalSettings;
    this.tvIssueUpdate = tvIssueUpdate;
    this.tvOldService = tvOldService;
    this.tvSelectedServer = tvSelectedServer;
    this.tvSingleCodeSelection = tvSingleCodeSelection;
    this.tvSwitchInspection = tvSwitchInspection;
    this.tvTakeMilepost = tvTakeMilepost;
    this.tvTraverseTrackReq = tvTraverseTrackReq;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityServerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityServerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_server, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityServerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.LastDivider;
      View LastDivider = rootView.findViewById(id);
      if (LastDivider == null) {
        break missingId;
      }

      id = R.id.appbarlayout;
      AppBarLayout appbarlayout = rootView.findViewById(id);
      if (appbarlayout == null) {
        break missingId;
      }

      id = R.id.btnClearData;
      Button btnClearData = rootView.findViewById(id);
      if (btnClearData == null) {
        break missingId;
      }

      id = R.id.btn_select_server;
      Button btnSelectServer = rootView.findViewById(id);
      if (btnSelectServer == null) {
        break missingId;
      }

      id = R.id.divider2;
      View divider2 = rootView.findViewById(id);
      if (divider2 == null) {
        break missingId;
      }

      id = R.id.dividerLast;
      View dividerLast = rootView.findViewById(id);
      if (dividerLast == null) {
        break missingId;
      }

      id = R.id.ll_ser_info;
      LinearLayout llSerInfo = rootView.findViewById(id);
      if (llSerInfo == null) {
        break missingId;
      }

      id = R.id.rl_audible_alert;
      RelativeLayout rlAudibleAlert = rootView.findViewById(id);
      if (rlAudibleAlert == null) {
        break missingId;
      }

      id = R.id.rl_bypass_task_view;
      RelativeLayout rlBypassTaskView = rootView.findViewById(id);
      if (rlBypassTaskView == null) {
        break missingId;
      }

      id = R.id.rl_issue_update;
      RelativeLayout rlIssueUpdate = rootView.findViewById(id);
      if (rlIssueUpdate == null) {
        break missingId;
      }

      id = R.id.rl_mp_require;
      RelativeLayout rlMpRequire = rootView.findViewById(id);
      if (rlMpRequire == null) {
        break missingId;
      }

      id = R.id.rl_old_service;
      RelativeLayout rlOldService = rootView.findViewById(id);
      if (rlOldService == null) {
        break missingId;
      }

      id = R.id.rl_single_code_selection;
      RelativeLayout rlSingleCodeSelection = rootView.findViewById(id);
      if (rlSingleCodeSelection == null) {
        break missingId;
      }

      id = R.id.rl_switch_inspection;
      RelativeLayout rlSwitchInspection = rootView.findViewById(id);
      if (rlSwitchInspection == null) {
        break missingId;
      }

      id = R.id.rl_traverse_req;
      RelativeLayout rlTraverseReq = rootView.findViewById(id);
      if (rlTraverseReq == null) {
        break missingId;
      }

      id = R.id.secondLastDivider;
      View secondLastDivider = rootView.findViewById(id);
      if (secondLastDivider == null) {
        break missingId;
      }

      id = R.id.serverPageToolBar;
      Toolbar serverPageToolBar = rootView.findViewById(id);
      if (serverPageToolBar == null) {
        break missingId;
      }

      id = R.id.sw_audible_alert;
      Switch swAudibleAlert = rootView.findViewById(id);
      if (swAudibleAlert == null) {
        break missingId;
      }

      id = R.id.sw_bypass_task_view;
      Switch swBypassTaskView = rootView.findViewById(id);
      if (swBypassTaskView == null) {
        break missingId;
      }

      id = R.id.sw_issue_update;
      Switch swIssueUpdate = rootView.findViewById(id);
      if (swIssueUpdate == null) {
        break missingId;
      }

      id = R.id.sw_old_service;
      Switch swOldService = rootView.findViewById(id);
      if (swOldService == null) {
        break missingId;
      }

      id = R.id.sw_require_mp;
      Switch swRequireMp = rootView.findViewById(id);
      if (swRequireMp == null) {
        break missingId;
      }

      id = R.id.sw_require_traverse;
      Switch swRequireTraverse = rootView.findViewById(id);
      if (swRequireTraverse == null) {
        break missingId;
      }

      id = R.id.sw_single_code_selection;
      Switch swSingleCodeSelection = rootView.findViewById(id);
      if (swSingleCodeSelection == null) {
        break missingId;
      }

      id = R.id.sw_switch_inspection;
      Switch swSwitchInspection = rootView.findViewById(id);
      if (swSwitchInspection == null) {
        break missingId;
      }

      id = R.id.tv_audible_alert;
      TextView tvAudibleAlert = rootView.findViewById(id);
      if (tvAudibleAlert == null) {
        break missingId;
      }

      id = R.id.tv_bypass_task_view;
      TextView tvBypassTaskView = rootView.findViewById(id);
      if (tvBypassTaskView == null) {
        break missingId;
      }

      id = R.id.tv_clr_all;
      TextView tvClrAll = rootView.findViewById(id);
      if (tvClrAll == null) {
        break missingId;
      }

      id = R.id.tv_global_settings;
      TextView tvGlobalSettings = rootView.findViewById(id);
      if (tvGlobalSettings == null) {
        break missingId;
      }

      id = R.id.tv_issue_update;
      TextView tvIssueUpdate = rootView.findViewById(id);
      if (tvIssueUpdate == null) {
        break missingId;
      }

      id = R.id.tv_old_service;
      TextView tvOldService = rootView.findViewById(id);
      if (tvOldService == null) {
        break missingId;
      }

      id = R.id.tv_selected_server;
      TextView tvSelectedServer = rootView.findViewById(id);
      if (tvSelectedServer == null) {
        break missingId;
      }

      id = R.id.tv_single_code_selection;
      TextView tvSingleCodeSelection = rootView.findViewById(id);
      if (tvSingleCodeSelection == null) {
        break missingId;
      }

      id = R.id.tv_switch_inspection;
      TextView tvSwitchInspection = rootView.findViewById(id);
      if (tvSwitchInspection == null) {
        break missingId;
      }

      id = R.id.tv_take_milepost;
      TextView tvTakeMilepost = rootView.findViewById(id);
      if (tvTakeMilepost == null) {
        break missingId;
      }

      id = R.id.tv_traverse_track_req;
      TextView tvTraverseTrackReq = rootView.findViewById(id);
      if (tvTraverseTrackReq == null) {
        break missingId;
      }

      return new ActivityServerBinding((RelativeLayout) rootView, LastDivider, appbarlayout,
          btnClearData, btnSelectServer, divider2, dividerLast, llSerInfo, rlAudibleAlert,
          rlBypassTaskView, rlIssueUpdate, rlMpRequire, rlOldService, rlSingleCodeSelection,
          rlSwitchInspection, rlTraverseReq, secondLastDivider, serverPageToolBar, swAudibleAlert,
          swBypassTaskView, swIssueUpdate, swOldService, swRequireMp, swRequireTraverse,
          swSingleCodeSelection, swSwitchInspection, tvAudibleAlert, tvBypassTaskView, tvClrAll,
          tvGlobalSettings, tvIssueUpdate, tvOldService, tvSelectedServer, tvSingleCodeSelection,
          tvSwitchInspection, tvTakeMilepost, tvTraverseTrackReq);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
