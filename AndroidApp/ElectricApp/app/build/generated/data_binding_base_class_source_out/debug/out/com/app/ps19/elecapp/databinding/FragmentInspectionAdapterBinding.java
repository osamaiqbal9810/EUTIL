// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ExpandableListView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentInspectionAdapterBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView inspectionExpandIndicator;

  @NonNull
  public final ExpandableListView inspectionExpandableListView;

  @NonNull
  public final ExpandableListView inspectionExpandableListViewFreeze;

  @NonNull
  public final LinearLayout llAssetsFilter;

  @NonNull
  public final LinearLayout llInspectionTile;

  @NonNull
  public final LinearLayout llRangeFilter;

  @NonNull
  public final LinearLayout llSortFilter;

  @NonNull
  public final LinearLayout llTypeFilter;

  @NonNull
  public final Spinner spAssetType;

  @NonNull
  public final Spinner spRangeFilter;

  @NonNull
  public final Spinner spSorting;

  @NonNull
  public final TextView tvMaintenance;

  @NonNull
  public final TextView tvMapMode;

  @NonNull
  public final TextView tvTaskForm;

  @NonNull
  public final TextView tvTaskReports;

  private FragmentInspectionAdapterBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView inspectionExpandIndicator,
      @NonNull ExpandableListView inspectionExpandableListView,
      @NonNull ExpandableListView inspectionExpandableListViewFreeze,
      @NonNull LinearLayout llAssetsFilter, @NonNull LinearLayout llInspectionTile,
      @NonNull LinearLayout llRangeFilter, @NonNull LinearLayout llSortFilter,
      @NonNull LinearLayout llTypeFilter, @NonNull Spinner spAssetType,
      @NonNull Spinner spRangeFilter, @NonNull Spinner spSorting, @NonNull TextView tvMaintenance,
      @NonNull TextView tvMapMode, @NonNull TextView tvTaskForm, @NonNull TextView tvTaskReports) {
    this.rootView = rootView;
    this.inspectionExpandIndicator = inspectionExpandIndicator;
    this.inspectionExpandableListView = inspectionExpandableListView;
    this.inspectionExpandableListViewFreeze = inspectionExpandableListViewFreeze;
    this.llAssetsFilter = llAssetsFilter;
    this.llInspectionTile = llInspectionTile;
    this.llRangeFilter = llRangeFilter;
    this.llSortFilter = llSortFilter;
    this.llTypeFilter = llTypeFilter;
    this.spAssetType = spAssetType;
    this.spRangeFilter = spRangeFilter;
    this.spSorting = spSorting;
    this.tvMaintenance = tvMaintenance;
    this.tvMapMode = tvMapMode;
    this.tvTaskForm = tvTaskForm;
    this.tvTaskReports = tvTaskReports;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentInspectionAdapterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentInspectionAdapterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_inspection_adapter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentInspectionAdapterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.inspection_expand_indicator;
      ImageView inspectionExpandIndicator = rootView.findViewById(id);
      if (inspectionExpandIndicator == null) {
        break missingId;
      }

      id = R.id.inspectionExpandableListView;
      ExpandableListView inspectionExpandableListView = rootView.findViewById(id);
      if (inspectionExpandableListView == null) {
        break missingId;
      }

      id = R.id.inspectionExpandableListViewFreeze;
      ExpandableListView inspectionExpandableListViewFreeze = rootView.findViewById(id);
      if (inspectionExpandableListViewFreeze == null) {
        break missingId;
      }

      id = R.id.ll_assets_filter;
      LinearLayout llAssetsFilter = rootView.findViewById(id);
      if (llAssetsFilter == null) {
        break missingId;
      }

      id = R.id.ll_inspection_tile;
      LinearLayout llInspectionTile = rootView.findViewById(id);
      if (llInspectionTile == null) {
        break missingId;
      }

      id = R.id.ll_range_filter;
      LinearLayout llRangeFilter = rootView.findViewById(id);
      if (llRangeFilter == null) {
        break missingId;
      }

      id = R.id.ll_sort_filter;
      LinearLayout llSortFilter = rootView.findViewById(id);
      if (llSortFilter == null) {
        break missingId;
      }

      id = R.id.ll_type_filter;
      LinearLayout llTypeFilter = rootView.findViewById(id);
      if (llTypeFilter == null) {
        break missingId;
      }

      id = R.id.sp_asset_type;
      Spinner spAssetType = rootView.findViewById(id);
      if (spAssetType == null) {
        break missingId;
      }

      id = R.id.sp_range_filter;
      Spinner spRangeFilter = rootView.findViewById(id);
      if (spRangeFilter == null) {
        break missingId;
      }

      id = R.id.sp_sorting;
      Spinner spSorting = rootView.findViewById(id);
      if (spSorting == null) {
        break missingId;
      }

      id = R.id.tv_maintenance;
      TextView tvMaintenance = rootView.findViewById(id);
      if (tvMaintenance == null) {
        break missingId;
      }

      id = R.id.tv_map_mode;
      TextView tvMapMode = rootView.findViewById(id);
      if (tvMapMode == null) {
        break missingId;
      }

      id = R.id.tv_task_form;
      TextView tvTaskForm = rootView.findViewById(id);
      if (tvTaskForm == null) {
        break missingId;
      }

      id = R.id.tv_task_reports;
      TextView tvTaskReports = rootView.findViewById(id);
      if (tvTaskReports == null) {
        break missingId;
      }

      return new FragmentInspectionAdapterBinding((LinearLayout) rootView,
          inspectionExpandIndicator, inspectionExpandableListView,
          inspectionExpandableListViewFreeze, llAssetsFilter, llInspectionTile, llRangeFilter,
          llSortFilter, llTypeFilter, spAssetType, spRangeFilter, spSorting, tvMaintenance,
          tvMapMode, tvTaskForm, tvTaskReports);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
