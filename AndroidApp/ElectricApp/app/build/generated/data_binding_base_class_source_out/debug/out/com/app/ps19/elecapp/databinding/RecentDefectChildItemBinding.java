// Generated by view binder compiler. Do not edit!
package com.app.ps19.elecapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.app.ps19.elecapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RecentDefectChildItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView imgShowReport;

  @NonNull
  public final ImageView listImage;

  @NonNull
  public final LinearLayout llSymbols;

  @NonNull
  public final LinearLayout reportThumbnailLayout;

  @NonNull
  public final TextView reportTitle;

  @NonNull
  public final TextView tvIssueDescription;

  @NonNull
  public final TextView tvIssueNotesCount;

  @NonNull
  public final TextView tvIssuePhotosCount;

  @NonNull
  public final TextView tvIssueRule;

  @NonNull
  public final TextView tvIssueType;

  private RecentDefectChildItemBinding(@NonNull RelativeLayout rootView,
      @NonNull ImageView imgShowReport, @NonNull ImageView listImage,
      @NonNull LinearLayout llSymbols, @NonNull LinearLayout reportThumbnailLayout,
      @NonNull TextView reportTitle, @NonNull TextView tvIssueDescription,
      @NonNull TextView tvIssueNotesCount, @NonNull TextView tvIssuePhotosCount,
      @NonNull TextView tvIssueRule, @NonNull TextView tvIssueType) {
    this.rootView = rootView;
    this.imgShowReport = imgShowReport;
    this.listImage = listImage;
    this.llSymbols = llSymbols;
    this.reportThumbnailLayout = reportThumbnailLayout;
    this.reportTitle = reportTitle;
    this.tvIssueDescription = tvIssueDescription;
    this.tvIssueNotesCount = tvIssueNotesCount;
    this.tvIssuePhotosCount = tvIssuePhotosCount;
    this.tvIssueRule = tvIssueRule;
    this.tvIssueType = tvIssueType;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RecentDefectChildItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecentDefectChildItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recent_defect_child_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecentDefectChildItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.img_show_report;
      ImageView imgShowReport = rootView.findViewById(id);
      if (imgShowReport == null) {
        break missingId;
      }

      id = R.id.list_image;
      ImageView listImage = rootView.findViewById(id);
      if (listImage == null) {
        break missingId;
      }

      id = R.id.ll_symbols;
      LinearLayout llSymbols = rootView.findViewById(id);
      if (llSymbols == null) {
        break missingId;
      }

      id = R.id.reportThumbnailLayout;
      LinearLayout reportThumbnailLayout = rootView.findViewById(id);
      if (reportThumbnailLayout == null) {
        break missingId;
      }

      id = R.id.reportTitle;
      TextView reportTitle = rootView.findViewById(id);
      if (reportTitle == null) {
        break missingId;
      }

      id = R.id.tv_issue_description;
      TextView tvIssueDescription = rootView.findViewById(id);
      if (tvIssueDescription == null) {
        break missingId;
      }

      id = R.id.tv_issue_notes_count;
      TextView tvIssueNotesCount = rootView.findViewById(id);
      if (tvIssueNotesCount == null) {
        break missingId;
      }

      id = R.id.tv_issue_photos_count;
      TextView tvIssuePhotosCount = rootView.findViewById(id);
      if (tvIssuePhotosCount == null) {
        break missingId;
      }

      id = R.id.tv_issue_rule;
      TextView tvIssueRule = rootView.findViewById(id);
      if (tvIssueRule == null) {
        break missingId;
      }

      id = R.id.tv_issue_type;
      TextView tvIssueType = rootView.findViewById(id);
      if (tvIssueType == null) {
        break missingId;
      }

      return new RecentDefectChildItemBinding((RelativeLayout) rootView, imgShowReport, listImage,
          llSymbols, reportThumbnailLayout, reportTitle, tvIssueDescription, tvIssueNotesCount,
          tvIssuePhotosCount, tvIssueRule, tvIssueType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
